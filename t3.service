#!/usr/bin/python
import json
import urllib2
import sys, re
import base64, time
from datetime import datetime
from pprint import pprint
# local
import t3_PyLib.Utils
from t3_PyLib.T3web import T3web

CLR = {
    "red":      '\033[91m',
    "green":    '\033[92m',
    "yellow":   '\033[93m',
    "cyan":     '\033[96m',
    "endc":     '\033[0m'
}

def usage(self):
    print """
Usage: {0} <option> <value>
Options:
    # BCC related
    -bc|--bcc-cmts <val>                get list of CMTS' this BCC cluster serves   [ accepts bcc1-4, 1-4, bccsp, sp    ]
    -bb|--bcc-bcc <val>                 get BCC cluster this CMTS belongs to        [ accepts swcmt0000001, swcmt1, 1   ]
    -bs|--bcc-status [<val>]            get status of BCC cluster by server         [ accepts bcc1-4, 1-4, bccsp, sp    ]
                                        (if not given all BCC clusters are queried)
    # CM related
    -cm|--cm-mac <mac>                  get CM details by MAC                       [ accepts a-f,0-9 with . and :      ]
    -ccc|--cm-count-cmts [<cmts>]       get CM count per CMTS, defaults to 'all'    [ accepts swcmt0000001, swcmt1, 1   ]

    # CM firmware related
    -fc|--fw-count                      get list and counts per CM firmware

    !! NOTE !! firmware version (fw-string) *must* be single quotes enclosed - eg: 'Fw_version string.10'
    -fm|--fw-mac <fw-string>            get list of cable modem MACs having FW installed
    -fmi|--fw-mac-ip <fw-string>        get list of cable modem MACs + IPs having FW installed

    # Generic
    -gm|--generic-mac <mac>             produces MAC in all known formats
    -gms|--generic-mac-search <mac>     produces MAC in all known formats ready for egrep search

    # Help
    -h|--help                           print this helpfull message
""".format(self)

def simpleKeyValOut(key, val):
    print "%s: %s" % (key, val)

def get_time(ts, format):
    return datetime.fromtimestamp(int(ts)).strftime(format)

def bccStatusOutput(data):
    #pprint(data)
    clrl = "" # cluster / role
    for cluster in data:
        for role in data[cluster]:
            host = "Unknown (this should not happen!)"
            if "Node" in data[cluster][role]:
                host = data[cluster][role]["Node"]

            cr = "%s:%s"  % (cluster, role)
            h  = "%s%s%s" % (CLR["cyan"], host, CLR["endc"])
            ip = "%s%s%s" % (CLR["cyan"], t3_PyLib.Utils.getIp(host), CLR["endc"])

            newclrl = "%s:%s,%s" % (cr, h, ip)

            if newclrl != clrl:
                clrl = newclrl
                print "%s" % clrl

            # here we could have just a string (hopefully a long one)
            # we're in trouble if the string is shorter than 5 chars.. :)

            noderesult = data[cluster][role]["Result"]

            if len(noderesult) > 4:
                print "\t%s" % noderesult
                continue

            now = int(time.time())
            for service in sorted(noderesult):
                print "\t%s" % service
                for check in noderesult[service]:
                    color = CLR["red"]
                    res = "Empty/invalid response from server (is CGI serving '/bccstatus'?)" # default
                    sts = "UNKNOWN"

                    if check == "lastchecked":
                        if noderesult[service][check]:
                            res = get_time(noderesult[service][check], "%Y-%m-%d %H:%M:%S")

                            if (now - int(noderesult[service][check])) > 60: # one min
                                res = "%sstale!%s => %s" % (CLR["red"], CLR["endc"], res)
                            
                        print "\t  %s:\t %s" % (check, res)
                        continue

                    base = noderesult[service][check]
                    if base["result"]:
                        res = base["result"]

                        if check == "logmtime":
                            res = get_time(res, "%Y-%m-%d %H:%M:%S")

                        if check == "fileownership":
                            lnth = len(res.split())
                            if lnth > 20:
                                res = "Too many bad files (exactly: %d)" % lnth

                        if check == "failover" and re.search('-', res):
                            # we may have our designated roles reversed, or failover protocol UDP (instead of TCP).
                            # in this case highlight the fact that it is so..
                            fcount, curr_role, curr_proto = res.split('-')

                            if role.lower() != curr_role.lower():
                                curr_role = "%s%s%s" % (CLR["yellow"], curr_role, CLR["endc"])
                            if curr_proto != 'TCP':
                                curr_proto = "%s%s%s" % (CLR["yellow"], curr_proto, CLR["endc"])

                            res = "%s file(s), %s, current: %s" % (fcount, curr_proto, curr_role)

                        if base["status"] == "OK":
                            color = CLR["green"]

                    if base["status"]:
                        sts = base["status"]

                    print "\t  %-20s: %s%s%s > %s" % (check, color, sts, CLR["endc"], res)

def macOutput(mac, delimeter=" "):
    mac = mac.replace(".", "")
    mac = mac.replace(":", "")
    mac = mac.upper()

    if len(mac) != 12 or not re.match("[A-F0-9]+", mac):
        print "Bac MAC format: %s" % mac
        return

    macWithDots = "%s.%s.%s"            % (mac[:4], mac[4:8], mac[8:])
    macWithCols = "%s:%s:%s:%s:%s:%s"   % (mac[:2], mac[2:4], mac[4:6], mac[6:8], mac[8:10], mac[10:])

    print "%s%s%s%s%s" % (mac, delimeter, macWithDots, delimeter, macWithCols)

def cmOutput(mac, macdets):
    #print "%-8s: %s" % ("Mac", mac.upper())
    for key in sorted(macdets):
        if isinstance(macdets[key], list):
            val = ", ".join(macdets[key])
            print "%-8s: %s" % (key, val)
            continue

        print "%-8s: %s" % (key, macdets[key])

def fwCountOutput(fwcount):
    total = 0
    for fw in sorted(fwcount, key=fwcount.get, reverse=True):
        print "%-120s: %d" % (fw, fwcount[fw])
        total = total + fwcount[fw]

    print "%120s: %s" % ("----- ", "-" * len(str(total)))
    print "%120s: %d" % ("Total ", total)

def fwCmtsMacOutput(fwcmtsdict, showip=False):
    for cmts in sorted(fwcmtsdict):
        val = ""

        if cmts == "error":
            showip = True # HACK, show error detail

        for mac in fwcmtsdict[cmts]:
            v = mac

            if showip:
                v = "%s/%s" % (mac, fwcmtsdict[cmts][mac])

            if not len(val):
                val = v
                continue

            val = "%s, %s" % (val, v)

        print "%s: %s" % (cmts, val)

def valueCheck(opt, val):
    if not val:
        raise ValueError("Must supply value for option: %s <val>" % opt)

    return 1

def getBccCluster(val):
    # we're interested in the second match, first is optional
    rebcc = re.search("^(bcc)?([1-4]{1}|sp)$", val)

    try:
        b = rebcc.group(2)
    except AttributeError:
        usage(self)
        sys.exit(5)

    return b

def getCmtsNum(val):
    # remove what we don't need
    val = re.sub("^swcmt(0+)?", "", val)

    if not re.match("^\d+", val):
        usage(self)
        sys.exit(33)

    return val

def main(params):
    self = params[0]

    if len(params) == 1:
        usage(self)
        return 127

    opt = params[1]     # option always exists
    try:
        val = params[2] # value may not

        # must not lower() for FW version!!
        if opt != "-fm" and opt != "--fw-mac" and opt != "-fmi" and opt != "--fw-mac-ip":
            val = val.lower()
    except IndexError:
        val = None

    t3w = T3web()

    ##
    ## BCC related

    if   opt == "-bb" or opt == "--bcc-bcc":
        if not val:
            usage(self)
            return 3

        data = t3w.httpRequest("getbcc", getCmtsNum(val))
        simpleKeyValOut(data["Cmts"][0], data["Bcc"])

    elif opt == "-bc" or opt == "--bcc-cmts":
        if not val:
            usage(self)
            return 4

        b = getBccCluster(val)
        data = t3w.httpRequest("getcmts", b)

        j = "\n       "
        if b == "sp":
            j = "\n        "

        data["Cmts"].sort()
        for c in data["Cmts"]:
            simpleKeyValOut(data["Bcc"], c)

    elif opt == "-bs" or opt == "--bcc-status":
        if val:
            b = getBccCluster(val)
        else:
            b = "all"

        data = t3w.httpRequest("getbccstatus", b)
        bccStatusOutput(data)

    ##
    ## CABLE MODEM related (collector)

    elif opt == "-cm" or opt == "--cm-mac":
        if not val:
            usage(self)
            return 7

        if not re.search("^([a-f0-9]{12}|[a-f0-9]{4}\.[a-f0-9]{4}\.[a-f0-9]{4}|[a-f0-9]{2}\:[a-f0-9]{2}\:[a-f0-9]{2}\:[a-f0-9]{2}\:[a-f0-9]{2}\:[a-f0-9]{2})$", val):
            usage(self)
            return 8

        # remove what we don't need
        val = val.replace(":", "")
        val = val.replace(".", "")

        data = t3w.httpRequest("getmac", val)
        cmOutput(val, data)

    elif opt == "-ci" or opt == "--cm-ip":
        if not val:
            usage(self)
            return 9

        data = t3w.httpRequest("getip", val)
        cmOutput(val, data)

    elif opt == "-ccc" or opt == "--cm-count-cmts":
        if val:
            val = getCmtsNum(val)
        else:
            val = "all"

        data = t3w.httpRequest("getcmcount", val)
        for k in sorted(data.keys()):
            simpleKeyValOut(k, data[k])

    ##
    ## FW related (collector)

    elif opt == "-fc" or opt == "--fw-count":
        data = t3w.httpRequest("getfwcount", "total")
        fwCountOutput(data)

    elif opt == "-fm" or opt == "--fw-mac" or opt == "-fmi" or opt == "--fw-mac-ip":
        if not val:
            usage(self)
            return 11

        # base32 FW version
        bfw = base64.b32encode(val.encode('ascii'))
        data = t3w.httpRequest("getfwcmtsmac", bfw.lower())

        fwCmtsMacOutput(data, True if (opt == "-fmi" or opt == "--fw-mac-ip") else False)

    ##
    ## GENERIC

    elif opt == "-gm" or opt == "--generic-mac":
        macOutput(val)
    elif opt == "-gms" or opt == "--generic-mac-search":
        valueCheck(opt, val)
        macOutput(val, "|")

    ##
    ## UNKNOWN

    else:
        usage(self)
        return 55

    return 1

if __name__ == "__main__":
    try:
        result = main(sys.argv)

        if result != 1:
            sys.exit(result)

        sys.exit(0)
    except Exception, e:
        print str(e)
        sys.exit(2)
